;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Changes in appearance ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;

;(set-default-font "-*-Andale Mono-*-*-*-*-13-*-*-*-*-*-*-*")
(set-default-font "-*-Inconsolata-*-*-*-*-14-*-*-*-*-*-*-*")
;(set-default-font "-*-Mensch-*-*-*-*-12-*-*-*-*-*-*-*")

;;(if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
;;(if (fboundp 'menu-bar-mode) (menu-bar-mode -1))
(if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
(set-scroll-bar-mode 'right)

(setq default-frame-alist
      `((cursor-color . "#009900")
        (background-color . "#151515")
        (foreground-color . "#ffffff")))

(setq initial-frame-alist 
      '((background-mode . dark)))

(modify-frame-parameters (selected-frame) default-frame-alist)
;(frame-update-face-colors (selected-frame))
(custom-set-faces
 '(modeline ((t (:foreground "white" :background "slate grey")))))


;;;;;;;;;;;;;;;;;;;;;;;;
;; Global environment ;;
;;;;;;;;;;;;;;;;;;;;;;;;

;;; Add mac ports to path
(setenv "PATH"
        (concat
         "/usr/local/bin" ":"
         "/usr/local/sbin" ":"
         (getenv "PATH")))

;;; Hook up mac's command key to meta
(setq mac-option-key-is-meta nil)
(setq mac-command-key-is-meta t)
(setq mac-command-modifier 'meta)
(setq mac-option-modifier nil)

;;; Syntax highlighting
(global-font-lock-mode 1)

;;; Some useful display options
(setq inhibit-startup-message t)
;;(setq display-time-day-and-date t)
(display-time)

;;; Keep the files clean by default
(setq default-major-mode 'text-mode)
(setq require-final-newline t)

;;; enable coloring for parenthesis matching
(show-paren-mode) 

;;; show regions with different color
(setq transient-mark-mode t)

;;; show line numbers
(setq line-number-mode 1)

;;; set the line number display limit to some large value
(setq line-number-display-limit 1000000)

;;; show column numbers
(setq column-number-mode t)

;;; set the column at which to wrap
(setq fill-column 72)

;;; visual bell
(setq visible-bell t)

;;; Set the debug option to enable a backtrace when a
;;; problem occurs.
;;(setq debug-on-error t)

;;; Use spaces instead of tab
(setq indent-tabs-mode nil)
(setq-default indent-tabs-mode nil)

;;; Set the tab width
(setq default-tab-width 4)
(setq tab-width 4)
(setq c-basic-indent 4)

;;; Set up line at a time scrolling
(setq scroll-conservatively 10000)
(setq scroll-step 0)

;;; Easier to remember window manipulating keys
(global-set-key [f1] 'shrink-window-horizontally)
(global-set-key [f2] 'shrink-window)
(global-set-key [f3] 'enlarge-window)
(global-set-key [f4] 'enlarge-window-horizontally)

;;; Replacements used often
(global-set-key [f5] 'replace-string)
(global-set-key [f6] 'replace-regexp)
(global-set-key [f7] 'rename-buffer)
(global-set-key "\C-n" 'new-frame)

;;; Setup Emacs to run bash as its primary shell.
(setq shell-file-name "bash")
(setq shell-command-switch "-ic")
(setq explicit-shell-file-name shell-file-name)
(setenv "SHELL" shell-file-name)
(setq explicit-sh-args '("--login" "-i"))

;;; Case insensitive buffer search
(setq case-fold-search t)

;;; General key mappings
(global-set-key "\M-g" 'goto-line) 

;;; open a new frame
(global-set-key "\M-n" 'new-frame)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; generally useful functions ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defun tab-hook ()
  (local-set-key [(control m)] 'newline-and-indent)
  (setq indent-tabs-mode nil))  


;;;;;;;;;;;;;;;;
;; load paths ;;
;;;;;;;;;;;;;;;;
(add-to-list 'load-path "~/.emacs.d/site-lisp/")
(add-to-list 'load-path "~/.emacs.d/site-lisp/python-mode")
(add-to-list 'load-path "~/.emacs.d/site-lisp/ocaml-mode")
;(add-to-list 'load-path "~/.emacs.d/site-lisp/slime")
;(add-to-list 'load-path "~/.emacs.d/site-lisp/coffee-mode")
(add-to-list 'load-path "~/.emacs.d/site-lisp/markdown-mode")
(add-to-list 'load-path "/usr/local/lib/erlang/lib/tools-2.6.8/emacs")


;;;;;;;;;;;
;; tramp ;;
;;;;;;;;;;;
(setq tramp-default-method "ssh")


;;;;;;;;;;;
;; setnu ;;
;;;;;;;;;;;
(require 'setnu)
(require 'setnu+)
(global-set-key "\C-cl" 'setnu-mode)


;;;;;;;;;;;;;;;;;;;;;
;; javascript-mode ;;
;;;;;;;;;;;;;;;;;;;;;
(require 'javascript-mode)
(add-to-list 'auto-mode-alist '("\\.js$" . javascript-mode))
(autoload 'javascript-mode "javascript-mode" "Load javascript-mode")


;;;;;;;;;;;;;;;;;
;; better diff ;;
;;;;;;;;;;;;;;;;;
(require 'diff-mode-)
(autoload 'diff-mode "diff-mode" "Load diff-mode")
(add-to-list 'auto-mode-alist '("\\.diff$" . diff-mode))


;;;;;;;;;;;;;;;;;
;; python-mode ;;
;;;;;;;;;;;;;;;;;
(setq interpreter-mode-alist
      (cons '("python" . python-mode)
            interpreter-mode-alist)
      python-mode-hook
      '(lambda () (progn
                    (set-variable 'py-indent-offset 4)
                    (set-variable 'py-smart-indentation nil)
                    (set-variable 'indent-tabs-mode nil) )))

(autoload 'python-mode "python-mode" "Python editing mode." t)
(add-to-list 'auto-mode-alist '("\\.py$" . python-mode))

;;; Force good formatting from Emacs for python
(defun my-pystuff ()
  (setq tab-width 4
        py-indent-offset 4
        indent-tabs-mode t
        py-smart-indentation nil
        python-indent 4))

(add-hook 'python-mode-hook 'my-pystuff)


;;;;;;;;;;;;
;; erlang ;;
;;;;;;;;;;;;
(setq erlang-root-dir "/usr/local/lib/erlang/")
(setq exec-path (cons "/usr/local/lib/erlang/bin/" exec-path))
(require 'erlang-start)


;;;;;;;;;;;
;; ocaml ;;
;;;;;;;;;;;
(setq auto-mode-alist
          (cons '("\\.ml[iyl]?$" .  caml-mode) auto-mode-alist))

(autoload 'caml-mode "ocaml" (interactive)
  "Major mode for editing Caml code." t)
(autoload 'camldebug "camldebug" (interactive) "Debug caml mode")


;;;;;;;;;;;;;;;;
;;; Markdown ;;;
;;;;;;;;;;;;;;;;
(autoload 'markdown-mode "markdown-mode.el"
   "Major mode for editing Markdown files" t)
(setq auto-mode-alist
   (cons '("\\.md" . markdown-mode) auto-mode-alist))


;;;;;;;;;;;
;; LaTeX ::
;;;;;;;;;;;
(add-hook 'LaTeX-mode-hook 'flyspell-mode)

;;;;;;;;;;;
;; go-lang ::
;;;;;;;;;;;

;; go mode
(setq load-path (cons "/usr/local/go/misc/emacs" load-path))
(require 'go-mode-load)

;;; tab hooks for auto-indention
(add-hook 'java-mode-hook 'tab-hook)
(add-hook 'python-mode-hook 'tab-hook)
(add-hook 'erlang-mode-hook 'tab-hook)
;(add-hook 'tuareg-mode-hook 'tab-hook)

